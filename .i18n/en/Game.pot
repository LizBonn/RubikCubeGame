msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Fri Feb 28 17:29:52 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! 🎉"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings… 🎭"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! 🎉"
msgstr ""

#: Game.Levels.World_one.L01_Introduction
msgid "Group in Lean"
msgstr ""

#: Game.Levels.World_one.L01_Introduction
msgid "First, we introduce how to define a group in Lean. Just use `(G : Type*) [Group G]`.\n"
"\n"
"This defines `G` as a group. A group is a special set such that the elements of the group can be combined using a binary operation, which we will denote by `*`, which is defined as a mapping from `G ⨯ G` to `G`.\n"
"\n"
"Groups satisfy four conditions:\n"
"\n"
"(1) For any elements `a` and `b` in the group, `a * b` is also in the group — this follows from the definition of `*`.\n"
"\n"
"(2) The associative property holds. For any `a`, `b`, `c` in `G`: `a * b * c = a * (b * c)`.\n"
"\n"
"(3) There exists an identity element `1`. For any `a` in `G`: `1 * a = a * 1 = a`.\n"
"\n"
"(4) Every element has an inverse. For any `a` in G: `a⁻¹ * a = 1`.\n"
"\n"
"In this first level we're going to introduce the tactic `rfl` as well.\n"
"The tactic `rfl` proves all theorems of the form `X = X`.\n"
"Prove that `a * b = a * b` by executing the `rfl` tactic."
msgstr ""

#: Game.Levels.World_one.L01_Introduction
msgid "In order to use the tactic `rfl`, you can enter it in the text box under the goal and hit \"Execute\""
msgstr ""

#: Game.Levels.World_one.L01_Introduction
msgid "Congratulations! You completed your first verified proof!\n"
"\n"
"Remember that `rfl` is a tactic.\n"
"\n"
"If you ever want information about the `rfl` tactic, you can click on `rfl` in the list of tactics on the right.\n"
"\n"
"Now click on \"Next\" to learn about the `rw` tactic."
msgstr ""

#: Game.Levels.World_one.L02_mul_assoc
msgid "mul_assoc"
msgstr ""

#: Game.Levels.World_one.L02_mul_assoc
msgid "The next levels focus on the basic properties required in the definition of group.\n"
"\n"
"In this second level the goal is `a * b * c = b * (a * c)`, but to help us we have an assumption `h` saying that `a * b = b * a`.\n"
"\n"
"Check that you can see `h` in your list of assumptions.\n"
"Before we can use `rfl`, we have to substitute `b * a` for `a * b`.\n"
"\n"
"We do this in Lean by rewriting the proof `h`, using the `rw` tactic."
msgstr ""

#: Game.Levels.World_one.L02_mul_assoc
msgid "First execute `rw [h]` to replace the `a * b` with `b * a`."
msgstr ""

#: Game.Levels.World_one.L02_mul_assoc
msgid "Then recall the definition of group in level 1, we know that `(a b c : G): a * b * c = a* (b * c)`.\n"
"\n"
"The proof of `a * b * c = a * (b * c)` is called mul_assoc."
msgstr ""

#: Game.Levels.World_one.L02_mul_assoc
msgid "Continue with `rw [mul_assoc]` to change `b * a * c`  to `b * (a * c)`. Lean can automatically identify variables to apply the lemmas."
msgstr ""

#: Game.Levels.World_one.L02_mul_assoc
msgid "Level completed! Note that you can do `rw [h, mul_assoc]` to solve this level in one line.\n"
"\n"
"Let's continue the journey."
msgstr ""

#: Game.Levels.World_one.L03_inverse_uniqueness
msgid "Inverse Uniqueness"
msgstr ""

#: Game.Levels.World_one.L03_inverse_uniqueness
msgid "In this third level the goal is to prove the left inverse of an element is unique.\n"
"\n"
"That is `∀ y : G, y * x = 1 → y = x⁻¹`.\n"
"\n"
"In order to prove a universal proposition, we need to use the tactic `intro`."
msgstr ""

#: Game.Levels.World_one.L03_inverse_uniqueness
msgid "Try to execute `intro y h`. We can get an assumption `h` saying that `y * x = 1`, while `y` is arbitrary."
msgstr ""

#: Game.Levels.World_one.L03_inverse_uniqueness
msgid "Then to prove `y = x⁻¹`, we need to rewrite the proof `h` with lemmas on the right.\n"
"\n"
"You can click on lemmas to learn their specific content and usage.\n"
"\n"
"`←` is useful in this level, `← h` means switching the two sides of the equation in `h`.\n"
"\n"
"Type \\l and then hit the space bar can get this arrow.\n"
"\n"
"For example, You can execute `rw [← h]`, if you want to rewrite the proof `1 = y * x` rather than `h : y * x = 1`."
msgstr ""

#: Game.Levels.World_one.L03_inverse_uniqueness
msgid "Similarly, `← one_mul` means `(a : G): a = 1 * a`.\n"
"\n"
"Let's learn how to tell Lean to change `x⁻¹` in the goal `y = x⁻¹` by giving `← one_mul` an explicit parameter.\n"
"\n"
"Try `rw [← one_mul x⁻¹]` to change `x⁻¹` into `1 * x⁻¹`."
msgstr ""

#: Game.Levels.World_one.L03_inverse_uniqueness
msgid "Can you take it from here?"
msgstr ""

#: Game.Levels.World_one.L03_inverse_uniqueness
msgid "Try `rw [← h, mul_assoc, mul_right_inv, mul_one]`"
msgstr ""

#: Game.Levels.World_one.L03_inverse_uniqueness
msgid "Level completed! Let's continue the journey."
msgstr ""

#: Game.Levels.World_one.L04_inverse_property
msgid "inverse_property"
msgstr ""

#: Game.Levels.World_one.L04_inverse_property
msgid "You may have noticed that we used the lemma `mul_right_inv` in the last level.\n"
"\n"
"It says `(a : G) : a * a⁻¹ = 1`, while the definition of inv `x⁻¹` in group `G` is `(a : G): a⁻¹ * a = 1`.\n"
"\n"
"In this fourth level the goal is to prove `∀ x : G, x * x⁻¹ = 1`, which means left inverse equals right inverse in a group."
msgstr ""

#: Game.Levels.World_one.L04_inverse_property
msgid "You can find that this prop with `∀` is no longer in the form of `Prop → Prop`.\n"
"\n"
"That means you just need to arbitrarily get an element from `G` without getting an assumption.\n"
"\n"
"So just execute `intro x` is Okay. It means `(x : G)`, while `x` is arbitrary."
msgstr ""

#: Game.Levels.World_one.L04_inverse_property
msgid "Note that if you want to tell lean to change `x * x⁻¹` in the goal by giving `← one_mul` an input `x * x⁻¹`, please put it in the parentheses. Can you take it from here?"
msgstr ""

#: Game.Levels.World_one.L04_inverse_property
msgid "Try `rw [← one_mul (x * x⁻¹)]`"
msgstr ""

#: Game.Levels.World_one.L04_inverse_property
msgid "If you want to rewrite the nth target conform to the form, just replace `rw` with `nth_rw n`.\n"
"\n"
"For example, `nth_rw 1` rewrite the first target conform to the form.\n"
"\n"
"Let's now try to solve this goal."
msgstr ""

#: Game.Levels.World_one.L04_inverse_property
msgid "Try `nth_rw 1 [← mul_left_inv x⁻¹]` and then `rw [mul_assoc x⁻¹⁻¹ x⁻¹ (x * x⁻¹), ← mul_assoc x⁻¹  x  x⁻¹]`"
msgstr ""

#: Game.Levels.World_one.L04_inverse_property
msgid "Level completed! Let's continue the journey."
msgstr ""

#: Game.Levels.World_one.L05_ZMod_definition
msgid "ZMod Definition"
msgstr ""

#: Game.Levels.World_one.L05_ZMod_definition
msgid "The next levels will introduce a concrete example of group called `ZMod n`.\n"
"\n"
"In lean, we define `ZMod: ℕ → Type`, so `ZMod n` is a type.\n"
"\n"
"If `n = 0`, `ZMod n` is `ℤ`. If `n > 0`, `ZMod n` equals `Fin n` that is both type and structure.\n"
"\n"
"As a structure, `Fin n` contains two types of value: `val` and `isLt`.\n"
"\n"
"For example, if `x : Fin n`, `x.val` is the value of `x` and `x.isLt` is a proof saying `x < n`.\n"
"\n"
"So all elements in `Fin n` are `Nat` less than `n`.\n"
"\n"
"We use `[NeZero n]` to show `n` doesn't equal zero.\n"
"\n"
"Note that when `x : ZMod n` and `NeZero n`, the proof `x < n` is represented by `x.val_lt`.\n"
"\n"
"In this fifth level we 're going to introduce the tactic `exact` as well.\n"
"\n"
"The tactic `exact e` closes the main goal if its target type matches that of `e`.\n"
"Prove that `x.val < n` by executing the `exact` tactic."
msgstr ""

#: Game.Levels.World_one.L05_ZMod_definition
msgid "Can you take it from here?"
msgstr ""

#: Game.Levels.World_one.L05_ZMod_definition
msgid "Try `exact x.val_lt`."
msgstr ""

#: Game.Levels.World_one.L05_ZMod_definition
msgid "Level completed!\n"
"\n"
"Remember that `ZMod n (n ≠ 0)` equals the set of natural numbers less than `n` now.\n"
"\n"
"Let's continue the journey."
msgstr ""

#: Game.Levels.World_one.L06_ZMod_addition
msgid "ZMod addition"
msgstr ""

#: Game.Levels.World_one.L06_ZMod_addition
msgid "In this sixth level we need to define proper addition in `ZMod n` to let it turns into an additive group.\n"
"\n"
"We use `+` to represent the addition in `ZMod n`, and let `(x + y).val = (x.val + y.val) % n`, `(x + y).val_lt : (x.val + y.val) % n < n`.\n"
"\n"
"In lean, we define a function called `ZMod_mk`, which can acquire an argumnet `n` and construct `ZMod n`."
msgstr ""

#: Game.Levels.World_one.L06_ZMod_addition
msgid "First, use `refine ZMod_mk ((x.val + y.val) % n) ?_` to tell Lean that, we define the sum to be `(x.val + y.val) % n`."
msgstr ""

#: Game.Levels.World_one.L06_ZMod_addition
msgid "Can you take it from here?"
msgstr ""

#: Game.Levels.World_one.L06_ZMod_addition
msgid "Try `apply Nat.mod_lt`."
msgstr ""

#: Game.Levels.World_one.L06_ZMod_addition
msgid "Level completed!\n"
"\n"
"Remember that addition of `ZMod n (n ≠ 0)` equals the addition within the `Mod n`.\n"
"\n"
"Let's continue the journey."
msgstr ""

#: Game.Levels.World_one.L07_ZMod_zero
msgid "ZMod zero element"
msgstr ""

#: Game.Levels.World_one.L07_ZMod_zero
msgid "In this seventh level is to prove that there is a null element in the `ZMod n`.\n"
"\n"
"Now try to prove this goal by yourself."
msgstr ""

#: Game.Levels.World_one.L07_ZMod_zero
msgid "Can you take it from here?"
msgstr ""

#: Game.Levels.World_one.L07_ZMod_zero
msgid "Try `rw [← ZMod_val_eq_iff_eq n (0 + x) x, ZMod_add_def, ZMod.val_zero, zero_add,Nat.mod_eq_of_lt]`."
msgstr ""

#: Game.Levels.World_one.L07_ZMod_zero
msgid "Level completed! Remember that `ZMod n` has a left null element.\n"
"\n"
"The proof that `ZMod n` has a right null element is similar.\n"
"\n"
"Let's continue the journey."
msgstr ""

#: Game.Levels.World_one.L08_ZMod_neg
msgid "ZMod negation"
msgstr ""

#: Game.Levels.World_one.L08_ZMod_neg
msgid "In this eighth level the goal is to prove each element in `ZMod n` has a right inverse.\n"
"\n"
"The right inverse `-x` is defined by `(-x).val = (n - x.val) % n` and `(-x).val_lt : (n - x.val) % n < n`."
msgstr ""

#: Game.Levels.World_one.L08_ZMod_neg
msgid "Can you take it from here?"
msgstr ""

#: Game.Levels.World_one.L08_ZMod_neg
msgid "Try `rw [← ZMod_val_eq_iff_eq n (x + -x) 0]`."
msgstr ""

#: Game.Levels.World_one.L08_ZMod_neg
msgid "You need to rewrite theorems to prove it.\n"
"\n"
"Note that if a theorem has assumption as condition, you need to give it an input as assumption.\n"
"\n"
"For example, the theorem `Nat.sub_add_cancel` has assumption `(h : m ≤ n)`, so we need `rw Nat.sub_add_cancel h`.\n"
"\n"
"In this exercise, we need `rw Nat.sub_add_cancel (le_of_lt x.val_lt)`.\n"
"\n"
"Now try to prove this goal by yourself."
msgstr ""

#: Game.Levels.World_one.L08_ZMod_neg
msgid "Level completed! Remember that `ZMod n` has a right inverse. The proof that `ZMod n` has a left inverse is similar.\n"
"\n"
"From the previous levels you can find that `ZMod n` is an additive commutative group.\n"
"\n"
"It contains nature numbers less than `n` and its addition is modular addition.\n"
"\n"
"For example, `ZMod 3 = {0, 1, 2}` , `1 + 2 = 3 (Mod 3) = 0`.\n"
"\n"
"The orient state of a corner block of the cube can actually be represented by `ZMod 3`.\n"
"\n"
"The original orient state is denoted as `0`, the state after the 120° clockwise rotation is `1`, the state after the 240° clockwise rotation is `2`, and the state is restored to `0` after the third rotation.\n"
"\n"
"Similarly, the orient state of a edge block of the cube can actually be represented by `ZMod 2`.\n"
"\n"
"We can use 8 natural numbers less than 3 to represent the corner block orient information of the cube, and 12 natural numbers less than 2 to represent the edge block orient information of the cube."
msgstr ""

#: Game.Levels.World_one
msgid "World One"
msgstr ""

#: Game.Levels.World_one
msgid "Welcome to tutorial world! In this world we learn the basic definition and property of group, and try to prove some relevant theorems.The boss level of this world is to prove: In the additive group ZMod n, -x is the right inverse of x. At the same time, we will understand the essence of the Rubik's cube from the perspective of group theory.\n"
"\n"
"You prove theorems by solving puzzles using tools called tactics.\n"
"The aim is to prove the theorem by applying tactics in the right order.\n"
"Let's learn some basic concepts and tactics. Click on \"Start\" below to begin your quest."
msgstr ""

#: Game.Levels.World_two.L01_Subset_definition
msgid "Subset in Lean"
msgstr ""

#: Game.Levels.World_two.L01_Subset_definition
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_two.L02_exercise
msgid "Containing relation is reflexive."
msgstr ""

#: Game.Levels.World_two.L02_exercise
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_two.L03_exercise
msgid "Containing relation is transitive."
msgstr ""

#: Game.Levels.World_two.L03_exercise
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_two.L04_intersection
msgid "Definition of intersection."
msgstr ""

#: Game.Levels.World_two.L04_intersection
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_two.L05_union
msgid "Definition of union."
msgstr ""

#: Game.Levels.World_two.L05_union
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_two.L06_exercise
msgid "Intersection is commutative."
msgstr ""

#: Game.Levels.World_two.L06_exercise
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_two.L07_exercise
msgid "Union is associative"
msgstr ""

#: Game.Levels.World_two.L07_exercise
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_two.L08_exercise
msgid "Exercise"
msgstr ""

#: Game.Levels.World_two.L08_exercise
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_two.L09_subgroup_definition1
msgid "A subgroup of a group is a subset of the group."
msgstr ""

#: Game.Levels.World_two.L09_subgroup_definition1
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_two.L10_subgroup_definition2
msgid "Elements of a subgroup is closed under multiplication."
msgstr ""

#: Game.Levels.World_two.L10_subgroup_definition2
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_two
msgid "World Two"
msgstr ""

#: Game.Levels.World_two
msgid "In this world we learn the basic definitions and properties of subsets and subgroups."
msgstr ""

#: Game.Levels.World_three.L01_injective_definition
msgid "Definition of injective function."
msgstr ""

#: Game.Levels.World_three.L01_injective_definition
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_three.L02_injective_composition
msgid "Composition of injective function."
msgstr ""

#: Game.Levels.World_three.L02_injective_composition
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_three.L03_surjective_definition
msgid "Definition of surjective function."
msgstr ""

#: Game.Levels.World_three.L03_surjective_definition
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_three.L04_surjective_composition
msgid "Composition of surjective function."
msgstr ""

#: Game.Levels.World_three.L04_surjective_composition
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_three.L05_bijective_definition
msgid "Definition of bijective function."
msgstr ""

#: Game.Levels.World_three.L05_bijective_definition
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_three.L06_bijective_composition
msgid "Composition of surjective function."
msgstr ""

#: Game.Levels.World_three.L06_bijective_composition
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_three.L07_possible_states_calculation
msgid "Possible states calculation."
msgstr ""

#: Game.Levels.World_three.L07_possible_states_calculation
msgid "Let E be all possible states of a cube, Ex be all possible states of corners and Ey be all possible states of edges. Then E is the direct product of Ex and Ey, which is a finite set. We calculate the number of this set."
msgstr ""

#: Game.Levels.World_three.L07_possible_states_calculation
msgid "Level Completed!"
msgstr ""

#: Game.Levels.World_three
msgid "World Three"
msgstr ""

#: Game.Levels.World_three
msgid "In this world we learn the basic definitions and properties of injective, surjective and bijective functions. Then we calculate all possible states of a Rubik's cube."
msgstr ""

#: Game
msgid "Hello World Game"
msgstr ""

#: Game
msgid "This text appears on the starting page where one selects the world/level to play.\n"
"You can use markdown."
msgstr ""

#: Game
msgid "Here you can put additional information about the game. It is accessible\n"
"from the starting through the drop-down menu.\n"
"\n"
"For example: Game version, Credits, Link to Github and Zulip, etc.\n"
"\n"
"Use markdown."
msgstr ""

#: Game
msgid "Game Template"
msgstr ""

#: Game
msgid "You should use this game as a template for your own game and add your own levels."
msgstr ""
